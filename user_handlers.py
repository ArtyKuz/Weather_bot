import datetime

from aiogram import Dispatcher, types
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import ReplyKeyboardRemove
from Keyboards import Keyboard, Keyboard_prognoz
from services import get_prognoz


async def process_start_command(message: types.Message):
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! –ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.')


async def process_help_command(message: types.Message):
    await message.answer('–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n\n'
                         '–ö–Ω–æ–ø–∫–∞ "–ù–∞—Ä–æ–¥–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑" –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é '
                         '–æ –Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø—Ä–∏–º–µ—Ç–∞—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –¥–Ω—ë–º.')


async def process_get_prognoz(message: types.Message, state: FSMContext):
    city = message.text.lower().strip().replace(' ', '-')
    async with state.proxy() as data:
        data['city'] = city
        current_date = datetime.date.today()
        tomorrow_date = current_date + datetime.timedelta(days=1)

        weather_today = get_prognoz(city, current_date)
        weather_tomorrow = get_prognoz(city, tomorrow_date)
        if not weather_today:
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –≤–ª–∞–¥–µ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ.')
        else:
            data['today'] = weather_today
            data['tomorrow'] = weather_tomorrow
            await message.answer(
                '–û—Ç–ª–∏—á–Ω–æ! –ü–æ —ç—Ç–æ–º—É –≥–æ—Ä–æ–¥—É —É –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑!\n\n–ö–∞–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n–í—ã–±–∏—Ä–∞–π –Ω–∏–∂–µ ‚¨á',
                reply_markup=Keyboard_prognoz)


async def process_weather_today(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await message.answer(text=f'<b>–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n'
                                  f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–Ω—ë–º: –æ—Ç {data["today"]["day_1"]} –¥–æ {data["today"]["day_2"]}\n'
                                  f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–æ—á—å—é: –æ—Ç {data["today"]["night_1"]} –¥–æ {data["today"]["night_2"]}\n\n'
                                  f'{data["today"]["text_prognoz"]}',
                             reply_markup=Keyboard, parse_mode='html')


async def process_weather_tomorrow(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await message.answer(text=f'<b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>\n'
                                  f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–Ω—ë–º: –æ—Ç {data["tomorrow"]["day_1"]} –¥–æ {data["tomorrow"]["day_2"]}\n'
                                  f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–æ—á—å—é: –æ—Ç {data["tomorrow"]["night_1"]} –¥–æ '
                                  f'{data["tomorrow"]["night_2"]}\n\n'
                                  f'{data["tomorrow"]["text_prognoz"]}',
                             reply_markup=Keyboard, parse_mode='html')


async def process_narodny_prognoz(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await message.answer(f'{data["today"]["narodny_prognoz"]}', reply_markup=Keyboard)


async def process_other_prognoz(message: types.Message):
    await message.answer('–í—ã–±–∏—Ä–∞–π –∫–∞–∫–æ–π –µ—â–µ –ø—Ä–æ–≥–Ω–æ–∑ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å ‚¨á', reply_markup=Keyboard_prognoz)


async def process_other_city(message: types.Message):
    await message.answer('–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑')


async def process_exit(message: types.Message):
    await message.answer('–£–≤–∏–¥–∏–º—Å—è!\n\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.',
                         reply_markup=ReplyKeyboardRemove())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º —Ñ–∞–π–ª–µ bot.py
def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(process_start_command, commands='start')
    dp.register_message_handler(process_help_command, commands='help')
    dp.register_message_handler(process_weather_today, text='–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
    dp.register_message_handler(process_weather_tomorrow, text='–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
    dp.register_message_handler(process_narodny_prognoz, text='üåû–ù–∞—Ä–æ–¥–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑üåû')
    dp.register_message_handler(process_other_prognoz, text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥–Ω–æ–∑ ‚ôª')
    dp.register_message_handler(process_other_city, text='–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ üèô')
    dp.register_message_handler(process_exit, text='–í—ã—Ö–æ–¥ ‚ùå')
    dp.register_message_handler(process_get_prognoz)
